alias g1='ssh g1@g1.local'
alias g2='ssh g1@g2.local'
alias g2c='code -n --folder-uri=vscode-remote://ssh-remote+g1@g2.local/Users/g1/BU/projects/'
alias g3='ssh g1@g3.local'
alias g3c='code -n --folder-uri=vscode-remote://ssh-remote+g1@g3.local/Users/g1//BU/projects/'
alias t2='ssh -t g1@t2 powershell'
alias t2c='code -n --folder-uri=vscode-remote://ssh-remote+g1@t2.local/Users/g1/BU/projects/'
alias server='ssh g1@server.local'
alias serverc='code -n --folder-uri=vscode-remote://ssh-remote+g1@server.local/Users/g1/BU/projects/'
alias aic='code -n --folder-uri=vscode-remote://ssh-remote+g1@100.78.148.55/home/g1/bu/projects'
alias d='cd ~/BU/projects/dotfiles'
alias p='cd ~/BU/projects'
alias ac='git add . && git commit --amend --no-edit'  # he --no-edit flag ensures that the commit message remains unchanged.
alias up='update'  # he --no-edit flag ensures that the commit message remains unchanged.

# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ROCM_HOME/lib
# export PYO3_USE_ABI3_FORWARD_COMPATIBILITY=1
GPARENT="$(dirname "$(dirname "$(realpath "$(readlink -f "${BASH_SOURCE:-$0}" 2>/dev/null || echo "${BASH_SOURCE:-$0}")")")")"
PARENT="$(dirname "$(realpath "$(readlink -f "${BASH_SOURCE:-$0}" 2>/dev/null || echo "${BASH_SOURCE:-$0}")")")"

# intel-mkl libraries for RVC singing voice conversion
# export PATH="$PATH:/opt/intel/bin"
# export LD_LIBRARY_PATH="$PATH:opt/intel/mkl/lib/intel64_lin/"
# remove_from_path "/opt/intel/bin"

# function git() {
#     local root
#     root=$(command git rev-parse --show-toplevel 2>/dev/null)

#     if [[ -z "$root" ]]; then
#         echo "❌ Not inside a Git repository." >&2
#         return 1
#     fi

#     echo "📁 Git root: $root"
#     command git --git-dir="$root/.git" --work-tree="$root" "$@"
# }



# /opt/homebrew/opt/openjdk/bin:/Users/g1/.pyenv/shims:/Users/g1/.cargo/bin:/Users/g1/BU/projects/dotfiles/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/share/dotnet:~/.dotnet/tools
# export PATH=/opt/homebrew/bin:/opt/ibc
# For the system Java wrappers to find this JDK, symlink it with
  # sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk

# openjdk is keg-only, which means it was not symlinked into /opt/homebrew,
# because macOS provides similar software and installing this software in
# parallel can cause all kinds of trouble.

# If you need to have openjdk first in your PATH, run:
  # echo 'export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"' >> ~/.zshrc

# For compilers to find openjdk you may need to set:
  # export CPPFLAGS="-I/opt/homebrew/opt/openjdk/include"



# . ~/.bashrc
# update_prompt() {
#     echo "Executing custom_precmd function"
# }
# PROMPT_COMMAND=custom_precmd

# NOT WORKING in git-bash, doesn't update when cd'ing
# Define color code variables
# BLACK="\[\033[0;30m\]"
# RED="\[\033[0;31m\]"
# GREEN="\[\033[0;32m\]"
# YELLOW="\[\033[0;33m\]"
# BLUE="\[\033[0;34m\]"
# MAGENTA="\[\033[0;35m\]"
# CYAN="\[\033[0;36m\]"
# WHITE="\[\033[0;37m\]"
# RESET="\[\033[0m\]"
# PS1="${YELLOW}$PWD${RESET} $(echo `which python` | awk -F/ '{print $(NF-2), $(NF-1), $NF}' OFS="/") "
# Define the function to update the Git prompt
# update_prompt() {
#     PS1='\u@\h:\w$(__git_ps1 " (%s)")\$ '
#     source ~/.bashrc
#     # PS1="$PWD "
# }
# Set the PROMPT_COMMAND to call the update_git_prompt function
# PROMPT_COMMAND='update_prompt'
# precmd_functions+=(update_prompt)
# Initialize the Git prompt initially
# update_git_prompt
# export PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[01;31m\]$(__git_ps1)\[\033[00m\]\$ '


# echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc

# # Prepend activated python interpreter path on prompt
# function update_prompt {
#     # : '
#     # %m = hostname
#     # %3d%% = trim cd by x
#     # '

#     echo "prompt reset"
#     # Display the activated virtual environment in the prompt
#     # if [[ -n "$VIRTUAL_ENV" ]]; then
#     #     PS1="($VIRTUAL_ENV) %n@%m: %2d%% "
#     # else
#     #     PS1="`which python` %n@%m: %2d%% "
#     # fi
#     # PS1="`which python` %n@%m: %2d%% "
    
#     # COLOR_RESET='%f'
#     # if [[ "$HOSTNAME" == "g1" ]]; then
#     #     COLOR='%F{yellow}'
#     # fi
#     # if [[ "$HOSTNAME" == "g2" ]]; then
#     #     COLOR='%F{yellow}'
#     # fi
#     # if [[ "$HOSTNAME" == "g3" ]]; then
#     #     COLOR='%F{red}'
#     # fi
#     # PS1="`which python` ${COLOR}%m${COLOR_RESET}: %3d%% "

#     # # Check if the string starts with the substring
#     # if [[ $string == $substring* ]]; then
#     # # Trim the substring from the beginning of the string
#     #     trimmed_string="${string#$substring}"
#     #     echo "Original string: $string"
#     #     echo "Trimmed string: $trimmed_string"
#     # else
#     #     echo "Substring doesn't match the start of the string."
#     # fi
#     # : '
#     # %m = hostname
#     # %3d%% = trim cd by x
#     # '
#     # GIT_BASH_DEFAULT_PS1="\[\033]0;$TITLEPREFIX:$PWD\007\]\n\[\033[32m\]\u@\h \[\033[35m\]$MSYSTEM \[\033[33m\]\w\[\033[36m\]`__git_ps1`\[\033[0m\]\n$"


    

# }
# precmd_functions+=(update_prompt)  # Execute the update_prompt function on cd

# # https://discussions.binle.com/thread/251000125
# # rustc compiler failed when building nautilus because "too many files open"
# function reset_python() {
#     # resets the global pyenv
#     if [ "$(which python)" = "/Users/g1/.pyenv/shims/python" ]; then
#         echo "Output matches the string."
#         pip cache purge
#         pyenv uninstall -f $PYENV_VERSION
#         pyenv install $PYENV_VERSION
#     else
#         echo "Output does not match the string."
#     fi
# }
# added





# Set the library path for the Python interpreter (in this case Python 3.13.4)
# export LD_LIBRARY_PATH="$HOME/.local/share/uv/python/cpython-3.13.4-linux-x86_64-gnu/lib:$LD_LIBRARY_PATH"
# export LD_LIBRARY_PATH="/Users/g1/.pyenv/versions/3.11.9/lib"

# export LD_LIBRARY_PATH="$HOME/.local/share/uv/python/cpython-3.11.11-macos-aarch64-none/lib"

# Set the Python executable path for PyO3
# export PYO3_PYTHON=$(pwd)/.venv/bin/python
# export PYO3_PYTHON="/Users/g1/BU/projects/nautilus_trader/.venv/bin/python"

# export PYTHONHOME="/Users/g1/BU/projects/pytower/.venv"
# export DYLD_LIBRARY_PATH="/Users/g1/BU/projects/pytower/.venv/lib"
# export PYO3_PYTHON="/Users/g1/BU/projects/pytower/.venv/bin/python"

# export PYTHONHOME="/Users/g1/BU/projects/pytower/.venv"
# export PYTHONPATH="/Users/g1/BU/projects/pytower"
# export PYO3_PRINT_CONFIG=1
# export PYO3_PYTHON="/Users/g1/.local/share/uv/python/cpython-3.11.11-macos-aarch64-none/bin/python3.11"


# # add pyenv to path
# export PYENV_ROOT="$HOME/.pyenv"
# path_add_front "$PYENV_ROOT/bin"
# eval "$(pyenv init -)"
# # eval "$(pyenv virtualenv-init -)"

# # Switches the terminal to use pyenv versions. Linux and Mac
# eval "$(pyenv init -)"

# deactivate > /dev/null 2>&1; pyenv virtualenv $PYENV_VERSION .venv
# virtualenv --python=$(pyenv which python) --always-copy ./.venv
# python -m venv ./.venv && \
# alias -g sk='pkill skhd && skhd --reload'  # kill then relaunch skhd in daemon mode

# # Add chrome alias
# # https://github.com/asyne/cproto#running-chrome-in-debug-mode
# alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
# alias -g sk='pkill skhd && skhd &!'  # kill then relaunch skhd in daemon mode
# export PATH="/opt/homebrew/Cellar/faiss/1.7.4/include:$PATH"
# export LD_LIBRARY_PATH=/opt/homebrew/Cellar/faiss/1.7.4/include:$LD_LIBRARY_PATH

# sudo ln /opt/homebrew/Cellar/faiss/1.7.4/include/faiss /usr/local/include

# # Check if the directory is not already in the LD_LIBRARY_PATH
# LIBRARY_DIR="/opt/homebrew/Cellar/faiss/1.7.4/include"
# if [[ ":$LD_LIBRARY_PATH:" != *":$LIBRARY_DIR:"* ]]; then
#     export LD_LIBRARY_PATH=$LIBRARY_DIR:$LD_LIBRARY_PATH
# fi
# export PGDATA=/path/to/your/data/directory
# path_add_front "/Users/g1/Downloads/openssl-3.0.8"
# path_add_front "//opt/homebrew/opt/rustup/bin"

# https://stackoverflow.com/a/19770395
    # CAUSES ERROR DO NOT USE!
    # export LC_CTYPE=C
    # export LANG=C

  

# MAC only aliases.

# path_add_front "$gparent/util"
# path_add_front "/usr/local/mysql/bin"

# enable logging in leaks tool https://www.mono-project.com/docs/advanced/runtime/memory-leaks/
# export MallocStackLogging=1 .../build/bin/mono-sgen program.exe

# source ~/.direnvrc
# parent() {
#     echo `dirname $(realpath .)`
# }

# gparent() {
#     echo `dirname $(dirname $(realpath .))`
# }

# ggparent() {
#     echo `dirname $(dirname $(dirname $(realpath .)))`
# }
# source "$SCRIPT_DIR/.direnvrc"
# function parent {
#     echo `dirname $(realpath .)`
# }
# function gparent {
#     echo `dirname $(dirname $(realpath .))`
# }
# function ggparent {
#     echo `dirname $(dirname $(dirname $(realpath .)))`
# }
# function ggparent {
#     echo `dirname $(gparent)`
# }

# make parent, gparent, ggparent commands available in shell
# source "$HOME/.bashrc"

# Allows VIM navigation in the terminal https://dougblack.io/words/zsh-vi-mode.html
# bindkey -v

# In order to use zplug, please add the following to your .zshrc: https://formulae.brew.sh/formula/zplug
# export ZPLUG_HOME=$(brew --prefix)/opt/zplug
# source $ZPLUG_HOME/init.zsh
# #zplug "jeffreytse/zsh-vi-mode", frozen:1
# #zplug "ohmyzsh/ohmyzsh", frozen:1
# #zplug "plugins/macos",   from:oh-my-zsh
# #zplug "plugins/git",   from:oh-my-zsh~
# if ! zplug check --verbose; then
#     printf "Install? [y/N]: "
#     if read -q; then
#         echo; zplug install
#     fi
# fi
# zplug load --verbose

# oh-my-zsh plugins
# plugins=(macos)

# export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH

# add pwd prefix to prompt
# show_virtual_env() {
#   if [[ -n "$VIRTUAL_ENV" && -n "$DIRENV_DIR" ]]; then
#     echo "($(basename $VIRTUAL_ENV))"
#   fi
#parent="$(cd "$(dirname "$0")"; pwd)"
#cd $parent
#echo $parent

# source ~/.bashrc


# to set hostname
# source "$HOME/BU/projects/bootstrap/bootstrap"

# overwrite system python with python installed with brew
# https://stackoverflow.com/a/48101303
# python3.11 installed with Brew only has pip3, works with virtualenv
# alias -g pip=pip3

# https://stackoverflow.com/a/51373253
# alias -g pip='python3.10 -m pip'

# python3.11 installed with Brew only has python3, works with virtualenv
# alias -g python=python3.10

# alias pytest="python -binytest"


# # >>> conda initialize >>>
# # !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/Users/g1/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/Users/g1/miniconda3/etc/profile.d/conda.sh" ]; then
#         . "/Users/g1/miniconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/Users/g1/miniconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# # <<< conda initialize <<<

if [[ ":$PATH:" != *":/opt/homebrew/bin:"* ]]; then
    export PATH=/opt/homebrew/bin:$PATH
fi

path_add_front "$PARENT/bin" # DOES THIS ACTUALLY WORK? just adds ~/bin
# eval "$(direnv hook zsh)" # direnv shell hook
# path_add_front "/opt/homebrew/opt/postgresql@17/bin"

path_add_front "/Users/g1/.influxdb/"

function mkenv() {
    sudo rm -rf ./.venv && \
    uv venv --python 3.11.11 --python-preference only-managed && \
    . ./.venv/bin/activate && \
    python -m ensurepip --upgrade
}