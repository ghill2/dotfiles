
;; or we can separate them into three manipulators
;; onfig files links
;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/in-the-wild.md
;; {:des "a to 1" :rules [[:a :1]]}
;; {:des "b to 2" :rules [[:b :2]]}
;; {:des "c to insert 123" :rules [[:c [:1 :2 :3]]]}

;; https://github.com/yqrashawn/yqdotfiles/blob/master/modules/yqrashawn/home-manager/dotfiles/karabiner.edn
;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md

;; https://github.com/rgomezcasas/dotfiles/blob/main/os/mac/karabiner-goku/karabiner.edn
;; https://github.com/alvaro-prieto/splitLayout/blob/master/karabiner.edn
;; multi froms here 
;; https://github.com/mmroczka/.dotfiles/blob/master/karabiner/karabiner.edn
;; https://github.com/nikitavoloboev/config/blob/master/karabiner/karabiner.edn
;; https://github.com/yqrashawn/yqdotfiles/blob/master/modules/yqrashawn/home-manager/dotfiles/karabiner.edn


;; !  | means mandatory
;; #  | means optional
;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option`
;; R  | right_shift
;; !! | mandatory command + control + optional + shift (hyper)
;; ## | optional any
;; hyper = [:##right_alt :!CTOleft_shift]
;; [:##spacebar :!CTOleft_shift nil {:alone :spacebar}]  ;; left thumb to hyper
{
    :profiles {:Default
    {:default true
        :sim     50  ;; keys need to be pressed within this threshold to be considered simultaneous
        :delay   500  ;; time after which the key press is delayed
        :alone   250    ;; hold for .. ms to register single tap (freddie is at 250)
        :held    500  ;; amount of ms to trigger if helds
        }}
    :applications
    {;; To obtain the app ID: `grep -A1 "CFBundleIdentifier" /Applications/The.app/Contents/Info.plist`
        :Chrome    ["com.google.Chrome", "com.google.Chrome.beta"]
        :Finder    ["com.apple.finder"]
        :Safari    ["com.apple.Safari"]
        :VSCode    ["com.microsoft.VSCode"]
        :TextEdit  ["com.apple.TextEdit"]
    }
    ;; :froms [
    ;;     {:modi [:left_command :left_shift] :key :v}
    ;; ]
    
    ;; With layer and variable, how to trigger the original modifier with other keys?

    ;; {:simlayers {:tab-mode {:key :tab}}
    ;; :simlayers {:tab-mode {:key :tab}}
    :templates {
        :open   "open \"%s\""
        :alfred "osascript -e 'tell application \"Alfred 3\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
    }
    ;; :modifiers {:cap [:left_control]}
    :main [
        
        {:des "f24" :rules [
            [:f24 [{:key :left_shift :lazy true :repeat false} {:set ["rthumb-mode" 1]}] nil {:afterup ["rthumb-mode" 0] :alone :spacebar}]
        ]}
        
        {:des "nav layer" :rules [
            [:tab [{:key :!CTOleft_shift :lazy true :repeat false} {:set ["tab-mode" 1]}] nil {:afterup ["tab-mode" 0] :alone :tab}]
            [:4 :!Sup_arrow ["tab-mode" 1]]  ;; extend line up
            [:r :!Sdown_arrow ["tab-mode" 1]]  ;; extend line down
        ]}

        ;; {:des "tab mode" :rules [
        ;;     [:tab [{:key :!CTOleft_shift :lazy true :repeat false} {:set ["tab-mode" 1]}] nil {:afterup ["tab-mode" 0] :alone :tab}]
        ;;     [:4 :!Sup_arrow ["tab-mode" 1]]  ;; extend line up
        ;;     [:r :!Sdown_arrow ["tab-mode" 1]]  ;; extend line down
        ;; ]}
        


        
        ;; {:des "caps" :rules [
        ;;     [:caps_lock {:key :left_control} nil {:alone :escape}]  ;; left option delete
        ;;     ;; [:left_control [{:key :left_control} {:set ["cap-mode" 1]}] nil {:afterup ["cap-mode" 0] :alone :escape}]
        ;;     ;; [:any :!Tany]
        ;;     ;; [:e :home ["cap-mode" 1]]  ;; caps_lock+e to home
        ;;     ;; [:r :end ["cap-mode" 1]]  ;; caps_lock+r to end
        ;;     ;; [:d :!Td ["caps-mode" 1]]  ;; right pane
        ;;     ;; [:f :!Tf ["caps-mode" 1]]  ;; prev pane
        ;;     ;; [:!Ta :!Cgrave_accent_and_tilde]
        ;;     ;; [:!Ts :!CSgrave_accent_and_tilde]
        ;; ]}
        
        ;; {:des "tab app switcher" :rules [
        ;;     [:q :!CStab ["tab-mode" 1]]
        ;;     [:w :!Ctab ["tab-mode" 1]]
            
        ;;     [:!Oa :!TStab]
        ;;     [:!Os :!Ttab]
        ;; ]}

        ;; {:des "textedit fix" :rules [
        ;;     [:e :!Ta [["cap-mode" 1] :TextEdit]]  ;; caps_lock+e to home in text edit
        ;;     [:r :!Te [["cap-mode" 1] :TextEdit]]  ;; caps_lock+r to end in text edit
        ;;     [:e :!TSa [["tab-mode" 1] :TextEdit]]  ;; tab+e to select line start in text edit
        ;;     [:r :!TSe [["tab-mode" 1] :TextEdit]]  ;; tab+e to select line end in text edit
            
        ;; ]}

        ;; {:des "misc" :rules [
        ;;     [:##f24 :spacebar]  ;; right thumb to spacebar
        ;; ]}

        
        
        ;; ;; Version 1: layer
        ;; {:des "thumb" :rules [
        ;;     [:f23 [{:key :!Cleft_option :lazy true :repeat false} {:set ["thumb-mode" 1]}] nil {:afterup ["thumb-mode" 0] :alone :return_or_enter}]
        ;;     [:d :!CStab ["thumb-mode" 1]]  ;; thumb+d to prev application
        ;;     [:f :!Ctab ["thumb-mode" 1]]  ;; thumb+f to next application
        ;;     [:c :!CSgrave_accent_and_tilde ["thumb-mode" 1]]  ;; thumb+c to prev window
        ;;     [:v :!Cgrave_accent_and_tilde ["thumb-mode" 1]]  ;; thumb+v to next window
        ;;     [:e :!TStab ["thumb-mode" 1]]  ;; thumb+e to prev tab
        ;;     [:r :!Ttab ["thumb-mode" 1]]  ;; thumb+e to next tab
        ;; ]}

        ;; {:des "lthumb rhand" :rules [
        ;;     [:j :left_arrow ["thumb-mode" 1]] ;; thumb+j to left arrow
        ;;     [:k :down_arrow ["thumb-mode" 1]] ;; thumb+k to down arrow
        ;;     [:l :up_arrow ["thumb-mode" 1]]  ;; thumb+l to up arrow
        ;;     [:semicolon :right_arrow ["thumb-mode" 1]]  ;; thumb+semicolon to right arrow
        ;;     [:m :home ["thumb-mode" 1]]
        ;; ]}
        
            
        ;; links to character layer examples
        ;; https://github.com/callum-oakley/qmk_firmware/tree/master/users/callum
        ;; https://youtu.be/8wZ8FRwOzhU?t=498

        ;; {:des "sym mode" :rules [
        ;;     ;; {:key :left_command :lazy true :repeat false}}{}
        ;;     [:f22 [{:set ["sym-mode" 1]}] nil {:afterup ["sym-mode" 0] :alone :delete_or_backspace}]
            
        ;;     ;; m, comma, period, slash
        ;;     [:m :open_bracket ["sym-mode" 1]] ;; left square bracket
        ;;     [:comma :close_bracket ["sym-mode" 1]] ;; right square bracket
        ;;     [:period :non_us_pound ["sym-mode" 1]] ;; backslash
        ;;     [:slash :!Snon_us_pound ["sym-mode" 1]] ;; pipe

        ;;     ;; j, k, l, semicolon
        ;;     [:j :!S9 ["sym-mode" 1]] ;; left parenthesis
        ;;     [:k :!S0 ["sym-mode" 1]]  ;; right parenthesis
        ;;     [:l :hyphen ["sym-mode" 1]] ;; hyphen
        ;;     [:semicolon :equal_sign ["sym-mode" 1]] ;; equal
            
        ;;     ;; u, i, o, p
        ;;     [:u :!Sopen_bracket ["sym-mode" 1]] ;; left curly bracket
        ;;     [:i :!Sclose_bracket ["sym-mode" 1]]  ;; right curly bracket
        ;;     [:o :!Shyphen ["sym-mode" 1]] ;; underscore
        ;;     [:p :!Sequal_sign ["sym-mode" 1]] ;; plus
        ;; ]}

    ]
}



        
        
