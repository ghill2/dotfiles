#!python3
import subprocess
import shutil
from pathlib import Path
import shlex
import os
from shlex import quote as esc
from common import create_cmd_str

DEFAULT_FROM_BRANCH = "upstream/develop"

def is_valid_git() -> bool:
    """Returns True if the cd is a valid git directory."""
    return subprocess.run(
        ["git", "rev-parse", "--is-inside-work-tree"],
        text=True, capture_output=True
    ).stdout.rstrip() == "true"


def has_upstream_branch() -> bool:
    """Returns True if the cd is a valid git directory."""
    return not subprocess.run(
        ["git", "remote", "show", "upstream"],
        text=True, capture_output=True
    ).stderr.startswith("fatal")


def capture_input() -> tuple[str, str]:
    new_branch_name = input("Enter new branch name: ")
    from_branch = input(f"Enter from branch: {DEFAULT_FROM_BRANCH} ") or DEFAULT_FROM_BRANCH
    return shlex.quote(new_branch_name), shlex.quote(from_branch)

new_branch_name, from_branch = capture_input()
# new_branch_name, from_branch = "nautilus_trader_new_feature", "upstream/develop"

dest_dir = Path(f"../{new_branch_name}").resolve()
dest_dir_str = esc(str(dest_dir))
######################################


assert is_valid_git(), "ERROR: not a git folder."
if "upstream" in from_branch:
    assert has_upstream_branch(), "Git repo has no upstream information."




#########################################
# TODO If the from_branch is develop and the folder is develop and already-up-to-date
# don't rebuild the project because there are no changes to be pulled
# add flag to disable build at bottom
# if upstream == nautilus and current branch is develop and everything up to date
cmds = [
    f"git clone . {dest_dir_str} --no-hardlinks --dissociate",  # error if dest exists
    f"cp ./.git/config {dest_dir_str}/.git/config",
    f"cd {dest_dir_str}",
    # "git pull --no-rebase",
    "git config remote.pushdefault origin",  # set push destination to origin/<branch_name>
    "git config push.default current",  # set push destination to origin/<branch_name>
    (f"git push --delete origin {new_branch_name}", ";"),  # delete remote branch, continue if err
]


if dest_dir.exists():
    raise RuntimeError(f"Destinatoin directory exists: {dest_dir}")
#########################################
# https://gist.github.com/anjohnson/8994c95ab2a06f7d2339

# TODO
cmds = [
    f"git clone . {dest_dir_str} --no-hardlinks --dissociate",  # error if dest exists
    f"cp ./.git/config {dest_dir_str}/.git/config",
    f"cd {dest_dir_str}",
    "git clean -xdf -e .direnv -e .envrc",  # reset the repo, CAREFUL this deletes files not commited yet.
    "git fetch --all",
    "git pull --no-rebase",
    f"git checkout -b {new_branch_name} {from_branch}",  # create a new branch based off from_branch
    "git config remote.pushdefault origin",  # set push destination to origin/<branch_name>
    "git config push.default current",  # set push destination to origin/<branch_name>
    (f"git push --delete origin {new_branch_name}", ";"),  # delete remote branch, continue if err
    # f"git push origin {new_branch_name}"  # publish new branch on remote origin
    "true"
]

# f"git branch -u {from_branch}",  # set the tracking branch to from_branch
cmd = create_cmd_str(cmds)

status = os.system(cmd)

if status > 0:
    raise RuntimeError(f"Halted due to terminal error at step 1...")


######################################

# add direnv
DEFAULT_ENVRC = """
layout python3
PATH_add .
path_add PYTHONPATH .
""".strip()
envrc_src = Path("./.envrc").absolute()
envrc_dest = Path(f"{dest_dir}/.envrc").resolve()
if envrc_src.exists():
    shutil.copy(str(envrc_src), str(envrc_dest))
else:
    envrc_dest.parent.mkdir(parents=True, exist_ok=True)
    envrc_dest.write_text(DEFAULT_ENVRC)


######################################

# add .direnv to .gitignore
def prepend_line(path, line):
    with open(path, 'r') as old:
        os.unlink(path)
        with open(path, 'w') as new:
            new.write(str(line) + "\n")
            shutil.copyfileobj(old, new)


gitignore = Path(f"../{new_branch_name}/.gitignore").resolve()
gitignore.touch(exist_ok=True)
direnv_exists = any(".direnv" in line for line in gitignore.read_text().splitlines())
if not direnv_exists:
    prepend_line(str(gitignore), ".direnv")

######################################
# Build the environment
# TODO split nautilus build into separate file with option to install pytower deps
# add option to install pytower deps
from ninstall import main

main(dest_dir)
os.system(f"cd {dest_dir} && code . -n")
# if status > 0:
#     raise RuntimeError(f"Halted due to terminal error at step 2...")
