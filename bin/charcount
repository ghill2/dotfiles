#!python

from pathlib import Path
from collections import Counter
from nltk import ngrams

chars = {
    '"',
    "'",
    "#",
    ":",
    "-",
    "_",
    "(",
    "{"
    "[",
    ")",
    "}",
    "]",
    "+",
    "=",
    "~",
    "&",
    "|",
    "%",
    "`",
    "@",
    "$",
    "/",
    ",",
    ".",
    "<",
    ">",
    "?",
    "/",
    "!",
    "@",
    "%",
    "^",
    "&",
    "*",
    ";",
}

def count_characters_in_file(file_path) -> dict:
    char_count = {}
    try:
        with open(file_path, 'r') as file:
            content = file.read()
            for char in content:
                char_count[char] = char_count.get(char, 0) + 1
        return char_count
    except FileNotFoundError:
        print("File not found.")
        return {}

def find_files_by_extensions(folders, extensions):
    matching_files = []
    for folder in folders:
        for extension in extensions:
            for path in Path(folder).rglob(f"*.{extension}"):
                if ".venv" not in str(path):
                    matching_files.append(path)
    return matching_files

def get_bigrams(path):
    with open(path, 'r') as file:
        bigrams = list(ngrams(file.read(), n=2))

        bigrams = [(first, second) for first, second in bigrams
                   if any(char in chars for char in second)
                   and any(char in chars for char in first)]
        
        bigrams = [(first, second) for first, second in bigrams
                   if first != second]
        
        counts = Counter(bigrams)
        counts = {k: v for k, v in counts.items() if v > 100}
        counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)

        counts = {f"{bigram[0]}{bigram[1]}": count for bigram, count in counts}

    return counts

def calculate_bigram_percentages(text):
    # Use regular expression to find bigrams with at least one letter and one non-letter character
    bigrams = re.findall(r'[a-zA-Z][^a-zA-Z]|[^\W_][a-zA-Z]', text)

    # Count the occurrences of each bigram
    bigram_counts = Counter(bigrams)

    # Calculate the total occurrences of each letter in the text
    letter_counts = Counter(re.findall(r'[a-zA-Z]', text))

    # Calculate the percentage of each bigram relative to the total occurrences of the letter it is next to
    bigram_percentages = {}
    for bigram, count in bigram_counts.items():
        letter = bigram[0]
        percentage = count / letter_counts[letter] * 100
        bigram_percentages[bigram] = percentage

    return bigram_percentages

if __name__ == "__main__":
    path1 = "/Users/g1/BU/projects/pytower_develop/pytower/data/files.py"
    path2 = "/Users/g1/BU/projects/pytower_develop/pytower/data/import.py"
    
    
    folders = [
            "/Users/g1/BU/projects/pytower_develop/pytower",
            "/Users/g1/BU/projects/nautilus_trader_develop"
    ]
    
    paths = find_files_by_extensions(folders, ["py", "pyx", "pxd"])
    
    #######################################################

    bigrams = {}
    for path in paths:
        counts = get_bigrams(path)
        for bigram, count in counts.items():
            bigrams[bigram] = bigrams.get(bigram, 0) + count

    bigrams = sorted(bigrams.items(), key=lambda x: x[1], reverse=True)

    for bigram, count in bigrams:
        print(bigram, count)
    exit()
    #######################################################

    total = {}
    for path in paths:
        counts = count_characters_in_file(path)
        for char, count in counts.items():
            total[char] = total.get(char, 0) + count
    
    
    total = {key: value for key, value in total.items() if key in chars}
    total = sorted(total.items(), key=lambda x: x[1], reverse=True)
    for char, count in total:
        print(f"{char} {count}")
